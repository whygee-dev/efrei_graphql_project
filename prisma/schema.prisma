// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model GenericCourse {
  id              String        @id @default(cuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         Boolean       @default(false)
  courses         Course[]
}

model Group {
  id              String        @id @default(cuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         Boolean       @default(false)
  curriculumId    String
  curriculum      Curriculum    @relation(fields: [curriculumId], references: [id])
  students        Student[]

  @@unique([name, curriculumId])
}

model Curriculum {
  id              String        @id @default(cuid())
  name            String
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  deleted         Boolean       @default(false)
  students        Student[]
  groups          Group[]
}

model Course {
  id              String        @id @default(cuid())
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  genericCourseId String
  genericCourse   GenericCourse @relation(fields: [genericCourseId], references: [id])
  startDate       DateTime
  endDate         DateTime
  deleted         Boolean       @default(false)
  professorId     String
  professor       Professor     @relation(fields: [professorId], references: [id])
  exams           Exam[]
  classes         Class[]
}

model Exam {
  id          String              @id @default(cuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deleted     Boolean             @default(false)
  courseId    String
  course      Course              @relation(fields: [courseId], references: [id])
  grades      Grade[]
}

model PersonalInfo {
  id          String              @id @default(cuid())
  firstName   String
  lastName    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deleted     Boolean             @default(false)
  email       String              @unique
  birthDate   DateTime 
  addressId   String
  address     Address             @relation(fields: [addressId], references: [id])
  studentId   String?
  student     Student?            
  professorId String?
  professor   Professor?          
}

model Student {
  id             String              @id @default(cuid())
  personalInfoId String              @unique
  personalInfo   PersonalInfo        @relation(fields: [personalInfoId], references: [id])
  curriculumId   String
  curriculum     Curriculum          @relation(fields: [curriculumId], references: [id])
  classes        Class[] 
  groupId        String
  group          Group               @relation(fields: [groupId], references: [id])
  grades         Grade[]
  deleted       Boolean             @default(false)
}

model Professor {
  id            String              @id @default(cuid())
  personalInfoId String             @unique
  personalInfo  PersonalInfo        @relation(fields: [personalInfoId], references: [id])
  hourlyWage    Float
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deleted       Boolean             @default(false)
  courses       Course[]
  classes       Class[]
}

model Grade {
  id          String              @id @default(cuid())
  grade       Int
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  studentId   String
  student     Student             @relation(fields: [studentId], references: [id])
  examId      String
  deleted     Boolean             @default(false)
  exam        Exam                @relation(fields: [examId], references: [id])
}   

model Class {
  id          String            @id @default(cuid())
  startDate   DateTime
  endDate     DateTime
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  professorId String
  courseId    String
  classroomId String
  deleted     Boolean           @default(false)
  course      Course            @relation(fields: [courseId], references: [id])
  professor   Professor         @relation(fields: [professorId], references: [id])
  students    Student[]
  classroom   Classroom         @relation(fields: [classroomId], references: [id])
}

model Campus {
  id          String              @id @default(cuid())
  name        String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deleted     Boolean             @default(false)
  addressId   String
  address     Address             @relation(fields: [addressId], references: [id])
  classrooms  Classroom[]
  buildings   Building[]
}

model Building {
  id          String              @id @default(cuid())
  name        String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deleted     Boolean             @default(false)
  classrooms  Classroom[]
  campusId    String
  campus      Campus              @relation(fields: [campusId], references: [id])
}

model Classroom {
  id          String              @id @default(cuid())
  name        String
  floor       Int
  buildingId  String
  building    Building            @relation(fields: [buildingId], references: [id])
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  deleted     Boolean             @default(false)
  classes     Class[]
  campusId    String
  campus      Campus              @relation(fields: [campusId], references: [id])
}

model Address {
  id            String              @id @default(cuid())
  street        String
  city          String
  zipCode       String
  country       String
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  deleted       Boolean             @default(false)
  personalInfos PersonalInfo[]
  campuses      Campus[]
}
